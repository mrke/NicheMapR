% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twolump.R
\name{twolump}
\alias{twolump}
\title{Two-lump Transient Heat Budget (for use with deSolve package)}
\usage{
ode(y = c(Tc_init, Ts_init, To_init), times = time, func = twolump, parms = indata)
}
\arguments{
\item{t}{= seq(1,3600,60), time intervals (s) at which output is required}

\item{Tc_init}{= 5, initial core temperature (deg C)}

\item{Ts_init}{= 5.1, initial shell temperature (deg C)}

\item{To_init}{= 5.2, initial surface temperature (deg C)}

\item{mass}{= 500, animal mass (g)}

\item{rho}{= 932, animal density (kg/m3)}

\item{x_shell}{= 0.001, shell thickness, m}

\item{q}{= 0, metabolic heat production rate W/m3}

\item{cp_inner}{= 3073, Specific heat of flesh J/(kg-K)}

\item{cp_outer}{= 3073, Specific heat of outer shell J/(kg-K)}

\item{k_inner}{= 0.5, Thermal conductivity of inner shell (W/mK, range: 0.412-2.8)}

\item{k_outer}{= 0.5, Thermal conductivity of outer shell (W/mK, range: 0.412-2.8)}

\item{emis}{= 0.95, Emissivity of animal (0-1)}

\item{abs}{= 0.85, solar absorptivity, decimal percent}

\item{geom}{= 2, Organism shape, 0-5, Determines whether standard or custom shapes/surface area/volume relationships are used: 0=plate, 1=cyl, 2=ellips, 3=lizard (desert iguana), 4=frog (leopard frog), 5=custom (see parameter 'shape_coefs')}

\item{shape_b}{= 3, Proportionality factor (-) for going from volume to area, represents ratio of width:height for a plate, length:diameter for cylinder, b axis:a axis for ellipsoid}

\item{shape_c}{= 1/3, Proportionality factor (-) for going from volume to area, represents ratio of length:height for a plate, c axis:a axis for ellipsoid}

\item{shape_coefs}{= c(10.4713,.688,0.425,0.85,3.798,.683,0.694,.743), Custom shape coefficients. Operates if geom=5, and consists of 4 pairs of values representing the parameters a and b of a relationship AREA=a*mass^b, where AREA is in cm2 and mass is in g. The first pair are a and b for total surface area, then a and b for ventral area, then for sillhouette area normal to the sun, then sillhouette area perpendicular to the sun}

\item{posture}{= 'n', pointing normal 'n', parallel 'p' to the sun's rays, or 'b' in between?}

\item{orient}{= 1, does the object orient toward the sun? (0,1)}

\item{fatosk}{= 0.4, Configuration factor to sky (-) for infrared calculations}

\item{fatosb}{= 0.4, Configuration factor to subsrate for infrared calculations}

\item{abs_sub}{= 0.2, substrate solar reflectivity, decimal percent}

\item{pctdif}{= 0.1, proportion of solar energy that is diffuse (rather than direct beam)}

\item{Tairf}{air temperature function with time, generated by 'approxfun' (deg C)}

\item{Tradf}{radiant temperature function with time, generated by 'approxfun'(deg C), averaging ground and sky}

\item{velf}{wind speed function with time, generated by 'approxfun' (m/s)}

\item{Qsolf}{radiation function with time, generated by 'approxfun' (W/m2)}

\item{Zenf}{zenith angle of sun function with time, generated by 'approxfun' (90 is below horizon), degrees}

\item{press}{= 101325, air pressure (Pa)}
}
\value{
Tc Core temperature (deg C)

Ts 'Skin' / shell temperature (deg C)

To Outer temperature (deg C)

Tcf Final (steady state) temperature (deg C), if conditions remained constant indefinately
}
\description{
Transient, 'one-lump', heat budget for computing rate of change of temperature
under a constant or variable environment
Michael Kearney, Raymond Huey and Warren Porter developed this R function and example in September 2017.
}
\examples{
library(deSolve) # note due to some kind of bug in deSolve, it must be loaded before NicheMapR!
library(NicheMapR)

# get microclimate data
loc <- "Alice Springs, Australia"
micro <- micro_global(loc = loc) # run the model with default location and settings
metout <- as.data.frame(micro$metout) # above ground microclimatic conditions, min shade
soil <- as.data.frame(micro$soil) # soil temperatures, minimum shade

# append dummy dates
days <- rep(seq(1, 12), 24)
days <- days[order(days)]
dates <- days + metout$TIME / 60 / 24 - 1 # dates for hourly output
dates2 <- seq(1, 12, 1) # dates for daily output
metout <- cbind(dates, metout)
soil <- cbind(dates, soil)

# combine relevant input fields
microclimate <- cbind(metout[, 1:5], metout[, 8], soil[, 4], metout[, 13:15], metout[, 6])
colnames(microclimate) <- c('dates', 'JULDAY', 'TIME', 'TALOC', 'TA1.2m', 'VLOC', 'TS', 'ZEN', 'SOLR', 'TSKYC', 'RHLOC')

# define animal parameters - here simulating a 1000 g cylinder
cp <- 3342 # specific heat of flesh, J/kg-C
cp_inner <- cp
cp_outer <- cp
rho <- 1000 # animal density, kg/m3
q <- 0 # metabolic rate, W/m3
k_inner <- 0.5 # thermal conductivity of core, W/mK
k_outer <- 0.5 # thermal conductivity of shell, W/mK
geom <- 1 # shape, -
x_shell <- 0.005 # thickness of outer shell (m)
posture <- 'n' # pointing normal 'n' or parallel 'p' to the sun's rays, or average 'b'?
orient <- 1 # does the object orient toward the sun? (0,1)
shape_b <- 4 # shape coefficient a, -
shape_c <- 2/3 # shape coefficient b, -
shape_coefs <- c(10.4713, 0.688, 0.425, 0.85, 3.798, 0.683, 0.694, 0.743)
fatosk <- 0.4 # solar configuration factor to sky, -
fatosb <- 0.4 # solar configuration factor to substrate, -
abs <- 0.9 # animal solar absorptivity, -
emis <- 0.95 # emissivity of skin, -
mass <- 1000 # mass, g
abs_sub <- 0.8 # substrate solar absorptivity, -
press <- 101325 # air pressure, Pa
pctdif <- 0.1 # proportion of solar energy that is diffuse, -

# loop through middle day of each month
juldays = c(15, 46, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349)
mons = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

for (i in 1:length(juldays)) {
  simday = juldays[i]
  microclim <- subset(microclimate, microclimate$JULDAY == simday)

  # use approxfun to create interpolations for the required environmental variables
  time <- seq(0, 60 * 24, 60) #60 minute intervals from microclimate output
  time <- time * 60 # minutes to seconds
  hours <- time/3600 # seconds to hours
  Qsolf <- approxfun(time, c(microclim[, 9], (microclim[1, 9] + microclim[24, 9]) /
      2), rule = 2)
  # approximate radiant temperature as the average of sky and substrate temperature
  Tradf <- approxfun(time, rowMeans(cbind(c(microclim[, 7], (microclim[1, 7] + microclim[24, 7]) / 24), c(microclim[, 10], (microclim[1, 10] + microclim[24, 10]) / 24)), na.rm = TRUE), rule = 2)
  velf <- approxfun(time, c(microclim[, 6], (microclim[1, 6] + microclim[24, 6]) / 2), rule = 2)
  Tairf <- approxfun(time, c(microclim[, 4], (microclim[1, 4] + microclim[24, 4]) / 2), rule = 2)
  Zenf <- approxfun(time, c(microclim[, 8], 90), rule = 2)

  t = seq(1, 3600 * 24, 60) # sequence of times for predictions (1 min intervals)
  indata <- list(mass = mass, x_shell = x_shell, geom = geom, k_inner = k_inner, k_outer = k_outer, q = q, cp_inner = cp_inner, cp_outer = cp_outer, emis = emis, rho = rho, abs = abs, shape_coefs = shape_coefs, shape_b = shape_b, shape_c = shape_c, posture = posture, orient = orient, fatosk = fatosk, fatosb = fatosb, abs_sub = abs_sub, pctdif = pctdif, press = press)

  Tc_init<-Tairf(1) # set inital Tc as air temperature
  Ts_init <- Tc_init
  To_init <- Tc_init

  Tbs_ode <- as.data.frame(ode(y = c(Tc_init, Ts_init, To_init), times = time, func = twolump, parms = indata))
  colnames(Tbs_ode) = c("time", "Tc", "Ts", "To", "Tcf")
  Tbs_ode$time <- Tbs_ode$time / 3600 # convert to hours

  with(Tbs_ode, plot(Tc ~ time, type = 'l', col = '1', ylim = c(-10, 80), xlim = c(0, 23), ylab='Temperature, deg C',xlab = 'hour of day', main = paste0(loc, ", ", mons[i], ", ", mass," g")))
  with(Tbs_ode, points(To ~ time, lty = 2, type = 'l', col = '1'))
  with(Tbs_ode, points(Tcf ~ time, type = 'l', col = '2'))
  points(Tairf(time) ~ hours, type = 'l', col = 'blue', lty = 2)
  legend(0,70, c("Tc", "To", "Tcf", "Tair"), lty = c(1, 2, 1, 2), lwd = c(2.5, 2.5, 2.5, 2.5), col = c("black", "black", "red", "blue"))
}
}

